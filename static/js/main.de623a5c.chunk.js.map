{"version":3,"sources":["component/ServiceContext/ServiceContext.js","component/ErrorBoundary/ErrorBoundary.js","constants/initialSorter.js","constants/filterTypes.js","reducers/reducer.js","store.js","component/Header/Header.js","utils/sortFunction.js","utils/createFilterFunction.js","utils/CookieMethods.js","actions/actions.js","component/hoc/connectWithBookService.js","component/Filter/Filter.js","component/Sorter/Sorter.js","utils/createSorterElement.js","component/FilterSorterBlock/FilterSorterBlock.js","component/Spinner/Spinner.js","component/ErrorElement/ErrorElement.js","component/BookCard/BookCard.js","component/ItemList/ItemList.js","component/BookList/BookList.js","component/FavoritesList/FavoritesList.js","component/PageNotFound/PageNotFound.js","component/FavoritesButton/FavoritesButton.js","component/MainPageButton/MainPageButton.js","component/App/App.js","api/EmulatedBackend.js","api/BookService.js","index.js"],"names":["React","createContext","ServiceProvider","Provider","ServiceConsumer","Consumer","ErrorBoundary","state","hasError","this","className","error","props","children","Component","initialSorter","active","sortersObject","title","type","name","ascendingDirection","raiting","date","filterTypes","text","value","publisher","options","author","initialState","list","favorites","filterState","sorterState","loading","reducer","action","console","log","payload","store","createStore","Header","sortFunction","sorter","newList","sort","a","b","localeCompare","reverse","createFilterFunction","createdFilter","Object","keys","filter","filterName","forEach","book","CookieMethods","cookieName","regexp","RegExp","cookieRawValue","document","cookie","match","length","split","valueArray","join","id","cookieArray","getCookieValue","push","_setCookie","newCookieArray","some","contains","remove","add","cookieMethods","fetchBookListSuccess","data","fetchBookListFailure","fetchBooks","dispatch","ownProps","bookService","getAllBooks","then","catch","err","fetchFilteredBooks","newFilterState","getFilteredBooks","addSortedBooks","currentSorter","newSorterState","fetchFavorites","fetchFavoritesListSuccess","connectWithBookService","Wrapped","Filter","onChangeHandler","filterObject","event","setState","temporaryFilterState","target","onSubmitHandler","preventDefault","onClearHandler","resetFilter","prevProps","filterNames","onSubmit","map","number","key","htmlFor","onChange","optionText","index","placeholder","onClick","connectWithStore","Sorter","onClickHandler","sorters","activeSorter","sorterName","findSorterFontWeight","findSorterDirection","stateProps","dispatchProps","updatedOwnProps","FilterSorterBlock","Spinner","role","ErrorElement","Card","onRaitingChangeHandler","newValue","raitingValue","raitingElement","current","textContent","disabled","favoriteClickHandler","toggle","favorite","createRef","style","width","ref","ItemList","fetchItems","Content","listName","connectWithcRouter","history","goBack","FavoritesButton","to","MainPageButton","App","path","exact","component","BookList","FavoritesList","PageNotFound","timeout","Promise","resolve","reject","Math","round","random","Error","setTimeout","emulatedBackend","adress","returnAllBooks","returnFilteredBooks","body","books","filters","allFilteredBooks","currentlyFilteredBooks","filterRawValue","filterType","filterValue","trim","toLowerCase","includes","format","find","emulatedFetch","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.de623a5c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst { \r\n    Provider: ServiceProvider,\r\n    Consumer: ServiceConsumer,\r\n} = React.createContext();\r\n\r\nexport {\r\n    ServiceProvider,\r\n    ServiceConsumer,\r\n};","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: error };\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ? \r\n        <div className=\"text-center my-4 w-100\">\r\n            {`Ошибка: ${this.state.error}`}\r\n        </div> :\r\n        this.props.children;\r\n    }\r\n}\r\n","const initialSorter = {\r\n    active: 'title',\r\n    sortersObject: {\r\n        title: {\r\n            type: 'title',\r\n            name: 'По алфавиту',\r\n            ascendingDirection: true,\r\n        },\r\n        raiting: {\r\n            type: 'raiting',\r\n            name: 'По рейтингу',\r\n            ascendingDirection: true,\r\n        },\r\n        date: {\r\n            type: 'date',\r\n            name: 'По дате',\r\n            ascendingDirection: true,\r\n        }\r\n    }, \r\n};\r\n\r\nexport default initialSorter;","const filterTypes = {\r\n    title: { name: \"title\", text: \"Название\", value: \"\", type: \"includes\" },\r\n    publisher: { name: \"publisher\", text: \"Издатель\", value: \"\", type: \"select\", options: [], },\r\n    author: { name: \"author\", text: \"Автор\", value: \"\", type: \"select\", options: [], },\r\n    date: { name: \"date\", text: \"Год\", value: \"\", type: \"select\", options: [], },\r\n};\r\n\r\nexport default filterTypes;","import initialSorter from '../constants/initialSorter';\r\nimport filterTypes from '../constants/filterTypes';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    favorites: [],\r\n    filterState: { ...filterTypes },\r\n    sorterState: { ...initialSorter },\r\n    loading: true,\r\n    error: null,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    console.log(action.type);\r\n\r\n    switch(action.type) {\r\n        case 'FETCH_BOOK_LIST_REQUEST':\r\n            return {\r\n                ...state,\r\n                list: [],\r\n                loading: true,\r\n                error: null,\r\n            };\r\n        case 'FETCH_BOOK_LIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                list: action.payload.list,\r\n                filterState: action.payload.filterState,\r\n                sorterState: action.payload.sorterState,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n        case 'FETCH_BOOK_LIST_FAILURE':\r\n            return {\r\n                ...state,\r\n                list: [],\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n            case 'FETCH_FAVORITES_LIST_REQUEST':\r\n            return {\r\n                ...state,\r\n                favorites: [],\r\n                loading: true,\r\n                error: null,\r\n            };\r\n        case 'FETCH_FAVORITES_LIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                favorites: action.payload.favorites,\r\n                sorterState: action.payload.sorterState,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n        case 'FETCH_FAVORITES_LIST_FAILURE':\r\n            return {\r\n                ...state,\r\n                favorites: [],\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducers/reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"d-flex flex-row flex-wrap justify-content-around mb-4\">\r\n            <h1>Книжный магазин</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","const sortFunction = (list, sorter) => {\r\n    let newList;\r\n    switch (sorter.active) {\r\n        case 'date':\r\n            if (sorter.sortersObject[sorter.active].ascendingDirection === true) {\r\n                newList = list.sort((a,b) => a.date - b.date);\r\n            } else {\r\n                newList = list.sort((a,b) => b.date - a.date);\r\n            }\r\n            break;\r\n        case 'raiting':\r\n            if (sorter.sortersObject[sorter.active].ascendingDirection === true) {\r\n                newList = list.sort((a,b) => a.raiting - b.raiting);\r\n            } else {\r\n                newList = list.sort((a,b) => b.raiting - a.raiting);\r\n            }\r\n            break;\r\n        default:\r\n            if (sorter.sortersObject[sorter.active].ascendingDirection === true) {\r\n                newList = list.sort((a,b) => a.title.localeCompare(b.title));\r\n            } else {\r\n                newList = list.sort((a,b) => a.title.localeCompare(b.title)).reverse();\r\n            }\r\n    }\r\n    return newList;\r\n}\r\n\r\nexport default sortFunction;","import filterTypes from '../constants/filterTypes';\r\n\r\n// Создаём выпадающий список доступных авторов, издательств и пр.\r\nexport default function createFilterFunction(list) {\r\n    const createdFilter = {};\r\n    // Смотрим, какие фильтры должны быть в виде выпадающего списка\r\n    const selectTypeFilters = Object.keys(filterTypes).filter(filterName => filterTypes[filterName].type === \"select\");\r\n    selectTypeFilters.forEach(filterName => {\r\n        // копируем настройки фильтра по умолчанию\r\n        createdFilter[filterName] = { ...filterTypes[filterName] };\r\n        // Проходим по массиву книг и собираем все поля для запрошенного фильтра,\r\n        // помещаем их в массив options\r\n        const options = {};\r\n        list.forEach(book => options[book[filterName]] = true);\r\n        createdFilter[filterName].options = Object.keys(options);\r\n    });\r\n    const respond = {\r\n        ...filterTypes,\r\n        ...createdFilter,\r\n    };\r\n    return respond;\r\n}","export default class CookieMethods {\r\n    constructor(cookieName) {\r\n        this.cookieName = cookieName;\r\n    }\r\n\r\n    getCookieValue() {\r\n        const regexp = new RegExp(`(${this.cookieName}=)([\\\\d,]*)(;|$)`);\r\n        const cookieRawValue = document.cookie.match(regexp);\r\n        console.log(cookieRawValue)\r\n        return cookieRawValue[2].length > 0 ? cookieRawValue[2].split(',') : [];\r\n    }\r\n\r\n    _setCookie(valueArray) {\r\n        document.cookie = `${this.cookieName}=${valueArray.join(',')}; path=/;`\r\n    }\r\n\r\n    add(id) {\r\n        const cookieArray = this.getCookieValue();\r\n        cookieArray.push(id);\r\n        this._setCookie(cookieArray);\r\n    }\r\n\r\n    remove(id) {\r\n        const cookieArray = this.getCookieValue();\r\n        const newCookieArray = cookieArray.filter(value => +value !== id);\r\n        this._setCookie(newCookieArray);\r\n    }\r\n\r\n    contains(id) {\r\n        const cookieArray = this.getCookieValue();\r\n        return cookieArray.some(value => +value === id);\r\n    }\r\n\r\n    toggle(id) {\r\n        if(this.contains(id)) {\r\n            this.remove(id);\r\n        } else {\r\n            this.add(id);\r\n        }\r\n    }\r\n}","import initialSorter from '../constants/initialSorter';\r\nimport sortFunction from '../utils/sortFunction';\r\nimport createFilterFunction from '../utils/createFilterFunction';\r\nimport CookieMethods from '../utils/CookieMethods';\r\n\r\nconst cookieMethods = new CookieMethods(\"favoriteBooks\");\r\n\r\nconst fetchBookListRequest = () => {\r\n    return {\r\n        type: \"FETCH_BOOK_LIST_REQUEST\",\r\n    }\r\n};\r\nconst fetchBookListSuccess = (data) => {\r\n    return {\r\n        type: \"FETCH_BOOK_LIST_SUCCESS\",\r\n        payload: data,\r\n    }\r\n};\r\nconst fetchBookListFailure = (error) => {\r\n    return {\r\n        type: \"FETCH_BOOK_LIST_FAILURE\",\r\n        payload: error,\r\n    }\r\n};\r\n\r\nconst fetchBooks = (dispatch, ownProps) => () => {\r\n    const { bookService } = ownProps;\r\n    dispatch(fetchBookListRequest());\r\n    bookService.getAllBooks()\r\n            .then(data => dispatch(fetchBookListSuccess({\r\n                list: sortFunction(data.list, initialSorter),\r\n                filterState: createFilterFunction(data.list),\r\n                sorterState: initialSorter,\r\n            })))\r\n            .catch(err => dispatch(fetchBookListFailure(err)))\r\n}\r\n\r\nconst fetchFilteredBooks = (dispatch, ownProps) => (newFilterState) => {\r\n    const { bookService } = ownProps;\r\n    dispatch(fetchBookListRequest());\r\n    bookService.getFilteredBooks(newFilterState)\r\n            .then(data => dispatch(fetchBookListSuccess({\r\n                list: sortFunction(data.list, initialSorter),\r\n                filterState: newFilterState,\r\n                sorterState: initialSorter,\r\n            })))\r\n            .catch(err => dispatch(fetchBookListFailure(err)))\r\n}\r\n\r\nconst addSortedBooks = (dispatch, ownProps) => (currentSorter) => {\r\n    const { list, filterState, sorterState } = ownProps.state;\r\n    let newSorterState = {\r\n        active: currentSorter.type,\r\n        sortersObject: { ...initialSorter.sortersObject },\r\n    };\r\n    newSorterState.sortersObject[currentSorter.type] = {\r\n        ...currentSorter,\r\n        ascendingDirection: sorterState.active !== currentSorter.type ? true : !currentSorter.ascendingDirection,\r\n    }\r\n    const newList = sortFunction(list, newSorterState);\r\n    dispatch(fetchBookListSuccess({\r\n        list: newList,\r\n        filterState,\r\n        sorterState: newSorterState\r\n    }));\r\n}\r\n\r\nconst fetchFavoritesListRequest = () => {\r\n    return {\r\n        type: \"FETCH_FAVORITES_LIST_REQUEST\",\r\n    }\r\n};\r\nconst fetchFavoritesListSuccess = (data) => {\r\n    return {\r\n        type: \"FETCH_FAVORITES_LIST_SUCCESS\",\r\n        payload: data,\r\n    }\r\n};\r\nconst fetchFavoritesListFailure = (error) => {\r\n    return {\r\n        type: \"FETCH_FAVORITES_LIST_FAILURE\",\r\n        payload: error,\r\n    }\r\n};\r\n\r\nconst fetchFavorites = (dispatch, ownProps) => () => {\r\n    const { bookService } = ownProps;\r\n    const cookieArray = cookieMethods.getCookieValue();\r\n    const filter = {\r\n        id: { name: \"id\", text: \"\", value: \"array-exact\", type: \"array-exact\", options: cookieArray, },\r\n    };\r\n    dispatch(fetchFavoritesListRequest());\r\n    bookService.getFilteredBooks(filter)\r\n            .then(data => dispatch(fetchFavoritesListSuccess({\r\n                favorites: sortFunction(data.list, initialSorter),\r\n                sorterState: initialSorter,\r\n            })))\r\n            .catch(err => dispatch(fetchFavoritesListFailure(err)))\r\n}\r\n\r\nexport {\r\n    fetchBooks,\r\n    fetchFilteredBooks,\r\n    addSortedBooks,\r\n    fetchFavorites,\r\n};","import React from 'react';\r\nimport { ServiceConsumer } from '../ServiceContext/ServiceContext';\r\n\r\nexport default function connectWithBookService(Wrapped) {\r\n    return (props) => {\r\n        return (\r\n            <ServiceConsumer>\r\n                {\r\n                    (value) => {\r\n                        return <Wrapped {...props} bookService={value} />\r\n                    }\r\n                }\r\n            </ServiceConsumer>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport { connect as connectWithStore } from 'react-redux';\r\n\r\nimport { fetchFilteredBooks } from '../../actions/actions';\r\nimport connectWithBookService from '../hoc/connectWithBookService';\r\nimport filterTypes from '../../constants/filterTypes';\r\n\r\nclass Filter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            temporaryFilterState: {\r\n                ...filterTypes,\r\n                ...props.filterState,\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.filterState !== prevProps.filterState) {\r\n            this.setState({ temporaryFilterState: this.props.filterState });\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (filterObject) => (event) => {\r\n        this.setState({\r\n            temporaryFilterState: {\r\n                ...this.state.temporaryFilterState,\r\n                [filterObject.name]: { ...filterObject, value: event.target.value },\r\n            }\r\n        });\r\n    };\r\n\r\n    onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.fetchFilteredBooks(this.state.temporaryFilterState);\r\n    }\r\n\r\n    onClearHandler = (event) => {\r\n        event.preventDefault();\r\n        let resetFilter = {};\r\n        const { temporaryFilterState } = this.state;\r\n        const filterNames = Object.keys(temporaryFilterState);\r\n        filterNames.forEach(filterName => resetFilter[filterName] = {\r\n            ...temporaryFilterState[filterName],\r\n            value: \"\",\r\n        });\r\n        this.props.fetchFilteredBooks(resetFilter);\r\n    }\r\n\r\n    render() {\r\n        const { temporaryFilterState } = this.state;\r\n        const filterNames = Object.keys(temporaryFilterState);\r\n        return (\r\n            <div className=\"d-flex flex-row flex-wrap justify-content-around mb-4\">\r\n                <h5>Фильтр</h5>\r\n                <form onSubmit={this.onSubmitHandler} className=\"w-100\">\r\n                        {filterNames.map((filterName, number) => {\r\n                            const filterObject = temporaryFilterState[filterName];\r\n                            switch(filterObject.type) {\r\n                                case \"select\":\r\n                                    return <div key={`input${number}`} className=\"form-group\">\r\n                                            <label htmlFor={`formControlInput${number}`}>{filterObject.text}</label>\r\n                                            <select\r\n                                                id={`formControlInput${number}`}\r\n                                                className=\"form-control\"\r\n                                                value={temporaryFilterState[filterName] ? temporaryFilterState[filterName].value : \"\"}\r\n                                                onChange={this.onChangeHandler(temporaryFilterState[filterName])}\r\n                                            >\r\n                                                <option value=\"\"></option>\r\n                                                {filterObject.options.map((optionText, index) =>\r\n                                                    <option\r\n                                                        key={`${filterName}option${index}`}\r\n                                                        value={optionText}\r\n                                                    >{optionText}</option>\r\n                                                )}\r\n                                            </select>\r\n                                        </div>\r\n                                default:\r\n                                    return <div key={`input${number}`} className=\"form-group\">\r\n                                        <label htmlFor={`formControlInput${number}`}>{filterObject.text}</label>\r\n                                        <input\r\n                                            onChange={this.onChangeHandler(temporaryFilterState[filterName])}\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id={`formControlInput${number}`}\r\n                                            placeholder=\"Введите текст\"\r\n                                            value={temporaryFilterState[filterName] ? temporaryFilterState[filterName].value : \"\"}\r\n                                        />\r\n                                    </div>\r\n                            }\r\n                        })}\r\n                    <button className=\"btn btn-outline-primary\" type=\"submit\">Отфильтровать</button>\r\n                    <button className=\"btn btn-outline-secondary mx-2\" type=\"reset\" onClick={this.onClearHandler}>Очистить</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { filterState: state.filterState }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchFilteredBooks: fetchFilteredBooks(dispatch, ownProps),\r\n    }\r\n}\r\n\r\nexport default \r\n    connectWithBookService(\r\n        connectWithStore(mapStateToProps, mapDispatchToProps)(Filter)\r\n    );","import React from 'react';\r\nimport { connect as connectWithStore } from 'react-redux';\r\n\r\nimport { addSortedBooks } from '../../actions/actions';\r\nimport connectWithBookService from '../hoc/connectWithBookService';\r\nimport { findSorterDirection, findSorterFontWeight } from '../../utils/createSorterElement';\r\n\r\nclass Sorter extends React.Component {\r\n    onClickHandler = (currentSorter) => () => {\r\n        this.props.addSortedBooks(currentSorter);\r\n    }\r\n\r\n    render() {\r\n        const { sorterState: { sortersObject: sorters, active: activeSorter } } = this.props.state;\r\n        return (\r\n            <div className=\"my-3\">\r\n                <span>Сортировка </span>\r\n                {Object.keys(sorters).map(sorterName => {\r\n                    const sorter = sorters[sorterName];\r\n                    return <button\r\n                        key={`Sorter_${sorter.type}`}\r\n                        onClick={this.onClickHandler(sorter)}\r\n                        type=\"button\"\r\n                        className=\"btn btn-outline-primary btn-sm mx-1 my-1\"\r\n                    >\r\n                        { findSorterFontWeight(sorter, activeSorter) }: { findSorterDirection(sorter) }\r\n                    </button>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { state }\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n    const updatedOwnProps = {\r\n        ...ownProps,\r\n        ...stateProps,\r\n    }\r\n    return {\r\n      ...stateProps,\r\n      addSortedBooks: addSortedBooks(dispatch, updatedOwnProps),\r\n    }\r\n  }\r\n\r\nexport default \r\n    connectWithBookService(\r\n        connectWithStore(mapStateToProps, null, mergeProps)(Sorter)\r\n    );","import React from 'react';\r\n\r\nconst findSorterDirection = (sorter) => sorter.ascendingDirection === true ? <span>по возрастанию</span> : <span>по убыванию</span>;\r\nconst findSorterFontWeight = (sorter, activeSorter) => sorter.type === activeSorter ? <b>{sorter.name}</b> : <span>{sorter.name}</span>;\r\n\r\nexport { findSorterDirection, findSorterFontWeight };","import React from 'react';\r\nimport Filter from '../Filter/Filter';\r\nimport Sorter from '../Sorter/Sorter';\r\n\r\nconst FilterSorterBlock = () => <>\r\n    <hr/>\r\n    <Filter/>\r\n    <Sorter/>\r\n    <hr/>\r\n</>\r\n\r\nexport default FilterSorterBlock;","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst ErrorElement = (props) => {\r\n    return (\r\n        <div className=\"text-center my-4 w-100\">\r\n            {`Ошибка: ${props.error}`}\r\n        </div>\r\n    );\r\n}\r\nexport default ErrorElement;","import React from 'react';\r\nimport CookieMethods from '../../utils/CookieMethods';\r\n\r\nconst cookieMethods = new CookieMethods(\"favoriteBooks\");\r\n\r\nexport default class Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.raitingElement = React.createRef();\r\n        this.id = props.book.id;\r\n        this.state = {\r\n            disabled: false,\r\n            favorite: cookieMethods.contains(this.id)\r\n        };\r\n      }\r\n\r\n    onRaitingChangeHandler = (newValue) => () => {\r\n        const raitingValue = this.raitingElement.current.textContent;\r\n        this.raitingElement.current.textContent = +raitingValue + newValue;\r\n        this.setState({ disabled: true });\r\n    }\r\n\r\n    favoriteClickHandler = () => {\r\n        cookieMethods.toggle(this.id);\r\n        this.setState({ favorite: !this.state.favorite })\r\n    }\r\n\r\n    render() {\r\n        const { book } = this.props;\r\n        const { disabled, favorite } = this.state;\r\n        return <>\r\n            <div className=\"card mb-3\" style={{width: '300px'}}>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{book.title}</h5>\r\n                    <p className=\"my-0\"><i>Автор:</i> {book.author}</p>\r\n                    <p className=\"my-0\"><i>Год:</i> {book.date}</p>\r\n                    <p className=\"my-0\"><i>Издатель:</i> {book.publisher}</p>\r\n                    <p className=\"my-0\">\r\n                        <i>Рейтинг:</i>&nbsp;\r\n                        <button\r\n                            onClick={this.onRaitingChangeHandler(-1)}\r\n                            className=\"btn btn-link\"\r\n                            title=\"Уменьшить рейтинг\"\r\n                            disabled={disabled}\r\n                        >-</button>&nbsp;\r\n                        <span ref={this.raitingElement}>{book.raiting}</span>&nbsp;\r\n                        <button\r\n                            onClick={this.onRaitingChangeHandler(1)}\r\n                            className=\"btn btn-link\"\r\n                            title=\"Увеличить рейтинг\"\r\n                            disabled={disabled}\r\n                        >+</button> \r\n                    </p>\r\n                    <p className=\"my-0\">\r\n                        <button type=\"button\"onClick={this.favoriteClickHandler} className=\"btn btn-outline-primary btn-sm\">\r\n                            { favorite ? \"Удалить из избранного\" : \"Добавить в избранное\" }\r\n                        </button>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Spinner from '../Spinner/Spinner';\r\nimport ErrorElement from '../ErrorElement/ErrorElement';\r\nimport BookCard from '../BookCard/BookCard';\r\n\r\nexport default class ItemList extends React.Component {\r\n    componentDidMount() {\r\n        this.props.fetchItems();\r\n    }\r\n\r\n    render() {\r\n        const { loading, error } = this.props.state;\r\n        const { list, listName } = this.props;\r\n        let Content;\r\n\r\n        if (loading) {\r\n            Content = () => <Spinner/>;\r\n        } else if (error) {\r\n            Content = () => <ErrorElement error={error} />;\r\n        } else if (list.length === 0) {\r\n            Content = () => <div>Ничего не найдено!</div>;\r\n        } else {\r\n            Content = () => list.map(book => <BookCard key={`book${book.id}`} book={book} />)\r\n        }\r\n        return <>\r\n            <h5 className=\"w-100 mb-4 text-center\">{listName}</h5>\r\n            <Content/>\r\n        </>;\r\n    }\r\n};","import React from 'react';\r\nimport { withRouter as connectWithcRouter } from 'react-router-dom';\r\nimport { connect as connectWithStore } from 'react-redux';\r\n\r\nimport connectWithBookService from '../hoc/connectWithBookService';\r\nimport { fetchBooks } from '../../actions/actions';\r\nimport ItemList from '../ItemList/ItemList';\r\n\r\nconst BookList = (props) => <ItemList {...props} listName={\"Список книг\"}/>\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state: state,\r\n        list: state.list,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchItems: fetchBooks(dispatch, ownProps),\r\n    }\r\n}\r\n\r\nexport default \r\n    connectWithcRouter(\r\n        connectWithBookService(\r\n            connectWithStore(mapStateToProps, mapDispatchToProps)(BookList)\r\n        )\r\n    );","import React from 'react';\r\nimport { withRouter as connectWithcRouter } from 'react-router-dom';\r\nimport { connect as connectWithStore } from 'react-redux';\r\n\r\nimport connectWithBookService from '../hoc/connectWithBookService';\r\nimport { fetchFavorites } from '../../actions/actions';\r\nimport ItemList from '../ItemList/ItemList';\r\n\r\nconst BookList = (props) => <ItemList {...props} listName={\"Список избранных книг\"}/>\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state: state,\r\n        list: state.favorites,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchItems: fetchFavorites(dispatch, ownProps),\r\n    }\r\n}\r\n\r\nexport default \r\n    connectWithcRouter(\r\n        connectWithBookService(\r\n            connectWithStore(mapStateToProps, mapDispatchToProps)(BookList)\r\n        )\r\n    );","import React from 'react';\r\nimport { withRouter as connectWithcRouter } from 'react-router-dom';\r\n\r\nconst PageNotFound = ({ history }) => {\r\n    return (<div className=\"text-center mt-5\">\r\n        <h2>Ошибка 404: нет такой страницы!</h2>\r\n        <div>Вы можете вернуться на<button className=\"btn btn-link\" onClick={() => history.goBack()}>предыдущую страницу</button></div>\r\n    </div>);\r\n};\r\n\r\nexport default connectWithcRouter(PageNotFound);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst FavoritesButton = () => <div className=\"text-right mb-3\">\r\n    <Link to=\"/favorites\" type=\"button\" className=\"btn btn-light\">К списку избранных книг</Link>\r\n</div>;\r\n\r\nexport default FavoritesButton;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MainPageButton = () => <div className=\"text-right mb-3\">\r\n    <Link to=\"/\" type=\"button\" className=\"btn btn-light\">На главную страницу</Link>\r\n</div>;\r\n\r\nexport default MainPageButton;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Header from '../Header/Header';\r\nimport FilterSorterBlock from '../FilterSorterBlock/FilterSorterBlock';\r\nimport BookList from '../BookList/BookList';\r\nimport FavoritesList from '../FavoritesList/FavoritesList';\r\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\r\nimport PageNotFound from '../PageNotFound/PageNotFound';\r\nimport FavoritesButton from '../FavoritesButton/FavoritesButton';\r\nimport MainPageButton from '../MainPageButton/MainPageButton';\r\n\r\nconst App = () => {\r\n    return (\r\n            <div className=\"container mt-5\">\r\n                <ErrorBoundary>\r\n                    <Switch>\r\n                        <Route path='/' exact component={FavoritesButton} />\r\n                        <Route path='/favorites' exact component={MainPageButton} />\r\n                    </Switch>\r\n                    <Header/>\r\n                    <Switch>\r\n                        <Route path='/' exact component={FilterSorterBlock} />\r\n                    </Switch>\r\n                </ErrorBoundary>\r\n            <div className=\"d-flex flex-row flex-wrap justify-content-around\">\r\n                <ErrorBoundary>\r\n                    <Switch>\r\n                        <Route path='/' exact component={BookList} />\r\n                        <Route path='/favorites' exact component={FavoritesList} />\r\n                        <Route component={PageNotFound} />\r\n                    </Switch>\r\n                </ErrorBoundary>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import books from './books.json';\r\n\r\nfunction timeout(data) {\r\n    return new Promise((resolve, reject) => {\r\n  \r\n      if (Math.round(Math.random()*10) === 9) {\r\n        reject(new Error('Тестовая ошибка (один раз из 10)'));\r\n      }\r\n  \r\n      setTimeout(() => {\r\n        resolve(data);\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\nexport default class EmulatedBackend {\r\n    emulatedFetch(adress, data) {\r\n        switch (adress) {\r\n            case '/all':\r\n                return this.returnAllBooks();\r\n            case '/filtered':\r\n                return this.returnFilteredBooks(data.body);\r\n            default:\r\n                return new Error('404');\r\n        }\r\n    }\r\n\r\n    returnAllBooks() {\r\n        return timeout(books);\r\n    }\r\n\r\n    returnFilteredBooks(filters) {\r\n        let allFilteredBooks = books.list;\r\n        const filtersKeys = Object.keys(filters);\r\n        const notEmptyFiltersKeys = filtersKeys.filter(filterName => filters[filterName].value.length > 0);\r\n\r\n        notEmptyFiltersKeys.forEach(filterName => {\r\n            const { value: filterRawValue, type: filterType } = filters[filterName];\r\n            const filterValue = filterRawValue.trim().toLowerCase();\r\n            let currentlyFilteredBooks;\r\n            switch (filterType) {\r\n            case \"more\":\r\n                currentlyFilteredBooks = allFilteredBooks.filter(book => book[filterName] > filterValue);\r\n                allFilteredBooks = [ ...currentlyFilteredBooks ];\r\n                break;\r\n            case \"less\":\r\n                currentlyFilteredBooks = allFilteredBooks.filter(book => book[filterName] < filterValue);\r\n                allFilteredBooks = [ ...currentlyFilteredBooks ];\r\n                break;\r\n            case \"includes\":\r\n                currentlyFilteredBooks = allFilteredBooks.filter(book => book[filterName].toLowerCase().includes(filterValue));\r\n                allFilteredBooks = [ ...currentlyFilteredBooks ];\r\n                break;\r\n            case \"date-exact\":\r\n                currentlyFilteredBooks = allFilteredBooks.filter(book => book[filterName].format(\"YYYY\") === filterValue);\r\n                allFilteredBooks = [ ...currentlyFilteredBooks ];\r\n                break;\r\n            case \"array-exact\":\r\n                const filterValueArray = filters[filterName].options;\r\n                currentlyFilteredBooks = filterValueArray.map(key => {\r\n                    return allFilteredBooks.find(book => book.id === +key);\r\n                });\r\n                allFilteredBooks = [ ...currentlyFilteredBooks ];\r\n                break;\r\n            default:\r\n                currentlyFilteredBooks = allFilteredBooks.filter(book => book[filterName].toLowerCase() === filterValue);\r\n                allFilteredBooks = [ ...currentlyFilteredBooks ];\r\n            }\r\n        });\r\n\r\n        const respond = {\r\n            list: allFilteredBooks,\r\n        }\r\n        return timeout(respond);\r\n    }\r\n  }","import EmulatedBackend from './EmulatedBackend';\r\n\r\nconst emulatedBackend = new EmulatedBackend();\r\n\r\nexport default class BookService {\r\n    getAllBooks() {\r\n      return emulatedBackend.emulatedFetch('/all');\r\n    }\r\n    getFilteredBooks (filters) {\r\n      return emulatedBackend.emulatedFetch('/filtered', { body: filters });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as StoreProvider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ServiceProvider } from './component/ServiceContext/ServiceContext';\n\nimport ErrorBoundary from './component/ErrorBoundary/ErrorBoundary';\nimport store from './store';\nimport App from './component/App/App';\n\nimport BookService from './api/BookService';\nconst bookService = new BookService();\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <ErrorBoundary>\n      <ServiceProvider value={bookService}>\n        <BrowserRouter basename=\"/book-store\">\n          <App />\n        </BrowserRouter>\n      </ServiceProvider>\n    </ErrorBoundary>\n  </StoreProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}